maze=[
    ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
    ["#"," "," "," "," "," "," "," ","#"," "," "," "," "," ","#"," "," "," "," "," "," "," ","#"," "," "," "," "," ","#"], # 0
    ["#"," ","#","#","#"," ","#","#","#"," ","#","#","#"," ","#","#","#"," ","#","#","#","#","#"," ","#","#","#"," ","#"],
    ["#"," ","#"," "," "," "," "," ","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," "," "," "," "," ","#"," ","#"], # 1
    ["#"," ","#","#","#","#","#","#","#"," ","#","#","#","#","#"," ","#"," ","#","#","#","#","#","#","#","#","#"," ","#"],
    [" "," "," "," "," "," ","#"," "," "," ","#"," "," "," ","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," ","#"], # 2
    ["#"," ","#"," ","#","#","#"," ","#","#","#"," ","#","#","#"," ","#","#","#","#","#","#","#"," ","#"," ","#"," ","#"],
    ["#"," ","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," "," "," ","#"," "," "," "," "," ","#"," ","#"," ","#"], # 3
    ["#"," ","#"," ","#"," ","#"," ","#","#","#","#","#","#","#","#","#","#","#"," ","#","#","#","#","#"," ","#"," ","#"],
    ["#"," ","#"," ","#"," ","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," ","#"," "," "," "," "," ","#"," ","#"], # 4
    ["#"," ","#"," ","#"," ","#"," ","#"," ","#","#","#","#","#"," ","#"," ","#","#","#"," ","#","#","#","#","#"," ","#"],
    ["#"," ","#"," ","#"," ","#"," ","#"," ","#"," "," "," ","#"," ","#"," ","#"," "," "," ","#"," "," "," ","#"," ","#"], # 5
    ["#"," ","#"," ","#","#","#"," ","#"," ","#"," ","#","#","#"," ","#"," ","#"," ","#"," ","#"," ","#"," ","#","#","#"],
    ["#"," ","#"," "," "," ","#"," ","#"," ","#"," ","#"," "," "," "," "," ","#"," ","#"," ","#"," ","#"," ","#"," ","#"], # 6
    ["#","#","#"," ","#"," ","#"," ","#"," ","#"," ","#"," ","#","#","#","#","#"," ","#"," ","#"," ","#"," ","#"," ","#"],
    ["#"," ","#"," ","#"," ","#"," ","#"," ","#"," ","#"," "," "," ","#"," ","#"," ","#"," "," "," ","#"," ","#"," ","#"], # 7
    ["#"," ","#"," ","#"," ","#"," ","#"," ","#"," ","#"," ","#","#","#"," ","#","#","#"," ","#","#","#"," ","#"," ","#"],
    ["#"," ","#"," ","#"," "," "," ","#"," ","#"," "," "," ","#"," "," "," ","#"," ","#"," ","#"," "," "," "," "," ","#"], # 8
    ["#"," ","#","#","#"," ","#","#","#"," ","#","#","#","#","#"," ","#","#","#"," ","#"," ","#"," ","#","#","#"," ","#"],
    ["#"," "," "," "," "," "," "," ","#"," "," "," "," "," ","#"," "," "," "," "," "," "," ","#"," ","#"," ","#"," ","#"], # 9
    ["#"," ","#","#","#","#","#","#","#","#","#","#","#"," ","#","#","#","#","#","#","#"," ","#"," ","#"," ","#"," ","#"],
    ["#"," ","#"," ","#"," "," "," "," "," "," "," ","#"," "," "," ","#"," "," "," "," "," ","#"," ","#"," ","#"," ","#"], # 10
    ["#","#","#"," ","#"," ","#","#","#","#","#"," ","#"," ","#"," ","#"," ","#","#","#","#","#"," ","#"," ","#"," ","#"],
    ["#"," "," "," ","#"," ","#"," "," "," ","#"," "," "," ","#"," ","#"," "," "," "," "," ","#"," ","#"," "," "," "," "], # 11
    ["#"," ","#"," ","#"," ","#"," ","#"," ","#","#","#","#","#"," ","#","#","#","#","#"," ","#"," ","#","#","#","#","#"],
    ["#"," ","#"," "," "," ","#"," ","#"," "," "," "," "," ","#"," ","#"," "," "," "," "," ","#"," "," "," ","#"," ","#"], # 12
    ["#"," ","#","#","#","#","#"," ","#","#","#"," ","#","#","#","#","#"," ","#","#","#","#","#","#","#","#","#"," ","#"],
    ["#"," "," "," "," "," "," "," "," "," ","#"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","#"], # 13
    ["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
    ]
#         0       1       2       3       4       5       6       7       8       9       10      11      12      13
      

i, j = 5, 1   #indicating starting points(2,0) in index of our new matrix where (i = 2*x +1),(j = 2*y +1)

moves = [] 
x_inc = []
y_inc = []
print("Start at ( 2 , 0 )")
while not(i == 23 and j == 27): #looping until ending points(11,13) in index of our new matrix where (i = 2*x +1),(j = 2*y +1)
    for move in ["North", "East", "South", "West"]:
        x = y = 0
        if move == "North":
            y -= 1

        elif move == "East":
            x += 1

        elif move == "South":
            y += 1

        elif move == "West":
            x -= 1

        if i+y > 0 and j+x >0:
            if (maze[i+y][j+x] == " "):
                #if no wall move and new coordinates marked
                moves.append(move)
                x_inc.append(x)
                y_inc.append(y)
                i += y
                j += x 
                maze[i][j] = "#"   #turning the path came into
                break
    else:
        #printing the moves if stuck and back to the last position
        for move in range(0,len(moves),2):
            print(moves[move], end=" ")
        else:
            moves = []
        print(f"Stuck at ( {(i-1)//2} , {(j-1)//2} )") #finding the original coordinates from our matrix coordinates

        x_last = x_inc.pop() + x_inc.pop()
        y_last = y_inc.pop() + y_inc.pop()
        i -= y_last
        j -= x_last
        print(f"Back to ( {(i-1)//2} , {(j-1)//2} )") #finding the original coordinates from our matrix coordinates
else:
    #printing the last moves if found the way
    for move in range(0,len(moves),2):
            print(moves[move], end=" ")
    else:
        print("Leaving at ( 11 , 13 )")